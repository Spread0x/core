{"dependencies":[{"name":"../stylesheets/app.css"},{"name":"web3"},{"name":"truffle-contract"},{"name":"../../build/contracts/MetaCoin.json"}],"generated":{"js":"\"use strict\";\n\nrequire(\"../stylesheets/app.css\");\n\nvar _web = require(\"web3\");\n\nvar _web2 = _interopRequireDefault(_web);\n\nvar _truffleContract = require(\"truffle-contract\");\n\nvar _truffleContract2 = _interopRequireDefault(_truffleContract);\n\nvar _MetaCoin = require(\"../../build/contracts/MetaCoin.json\");\n\nvar _MetaCoin2 = _interopRequireDefault(_MetaCoin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// MetaCoin is our usable abstraction, which we'll use through the code below.\n// Import the page's CSS. Webpack will know what to do with it.\nvar MetaCoin = (0, _truffleContract2.default)(_MetaCoin2.default);\n\n// The following code is simple to show off interacting with your contracts.\n// As your needs grow you will likely need to change its form and structure.\n// For application bootstrapping, check out window.addEventListener below.\n\n\n// Import our contract artifacts and turn them into usable abstractions.\n\n\n// Import libraries we need.\nvar accounts;\nvar account;\n\nwindow.App = {\n  start: function start() {\n    var self = this;\n\n    // Bootstrap the MetaCoin abstraction for Use.\n    MetaCoin.setProvider(web3.currentProvider);\n\n    // Get the initial account balance so it can be displayed.\n    web3.eth.getAccounts(function (err, accs) {\n      if (err != null) {\n        alert(\"There was an error fetching your accounts.\");\n        return;\n      }\n\n      if (accs.length == 0) {\n        alert(\"Couldn't get any accounts! Make sure your Ethereum client is configured correctly.\");\n        return;\n      }\n\n      accounts = accs;\n      account = accounts[0];\n      console.log(account);\n\n      self.refreshBalance();\n    });\n  },\n\n  setStatus: function setStatus(message) {\n    var status = document.getElementById(\"status\");\n    status.innerHTML = message;\n  },\n\n  refreshBalance: function refreshBalance() {\n    var self = this;\n\n    var meta;\n    MetaCoin.deployed().then(function (instance) {\n      meta = instance;\n      return meta.getBalance.call(account, { from: account });\n    }).then(function (value) {\n      var balance_element = document.getElementById(\"balance\");\n      balance_element.innerHTML = value.valueOf();\n    }).catch(function (e) {\n      console.log(e);\n      self.setStatus(\"Error getting balance; see log.\");\n    });\n  },\n\n  sendCoin: function sendCoin() {\n    var self = this;\n\n    var amount = parseInt(document.getElementById(\"amount\").value);\n    var receiver = document.getElementById(\"receiver\").value;\n\n    this.setStatus(\"Initiating transaction... (please wait)\");\n\n    var meta;\n    MetaCoin.deployed().then(function (instance) {\n      meta = instance;\n      return meta.sendCoin(receiver, amount, { from: account });\n    }).then(function () {\n      self.setStatus(\"Transaction complete!\");\n      self.refreshBalance();\n    }).catch(function (e) {\n      console.log(e);\n      self.setStatus(\"Error sending coin; see log.\");\n    });\n  }\n};\n\nwindow.addEventListener('load', function () {\n  // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n  if (typeof web3 !== 'undefined') {\n    console.warn(\"Using web3 detected from external source. If you find that your accounts don't appear or you have 0 MetaCoin, ensure you've configured that source properly. If using MetaMask, see the following link. Feel free to delete this warning. :) http://truffleframework.com/tutorials/truffle-and-metamask\");\n    // Use Mist/MetaMask's provider\n    window.web3 = new _web2.default(web3.currentProvider);\n  } else {\n    console.warn(\"No web3 detected. Falling back to http://127.0.0.1:9545. You should remove this fallback when you deploy live, as it's inherently insecure. Consider switching to Metamask for development. More info here: http://truffleframework.com/tutorials/truffle-and-metamask\");\n    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n    window.web3 = new _web2.default(new _web2.default.providers.HttpProvider(\"http://127.0.0.1:9545\"));\n  }\n\n  App.start();\n});"},"hash":"3f11006143ac90a4789f7c0a27caad85"}